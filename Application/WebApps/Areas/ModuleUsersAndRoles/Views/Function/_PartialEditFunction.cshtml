@using BussinessFacade
@using CommonData
@using ObjectInfo
@model FunctionInfo
@try
{
    <div class="popup-opacity-wrapper"></div>
    <div class="d-popup" style="overflow: visible">
        <div class="d-popup-content grid">
            <div>
                <label>Function Name</label>
                <input type="text" id="txtFunctionNameEdit" maxlength="250" value="@Model.FunctionName" />
            </div>

            <div>
                <label>Display Name</label>
                <input type="text" id="txtDisplayNameEdit" maxlength="250" value="@Model.DisplayName" />
            </div>

            <div>
                <label>Function Type</label>
                <select id="cboFunctionTypeEdit">
                    @foreach (var item in AllCodeBL.GetAllCodeByCdName(AllCodeCdName.FunctionType))
                    {
                        <option @(item.CdVal == Model.FunctionType.ToString() ? "selected=\"selected\"" : "") value="@item.CdVal">@item.Content</option>
                    }
                </select>
            </div>

            <div>
                <label>Url Get</label>
                <input type="text" id="txtHrefGetEdit" maxlength="250" value="@Model.HrefGet" />
            </div>

            <div>
                <label>Url Post</label>
                <input type="text" id="txtHrefPostEdit" maxlength="250" value="@Model.HrefPost" />
            </div>

            <div>
                <label>Function parent</label>
                <select id="cboParentIdEdit">
                    <option value="" selected="selected">None</option>
                    @foreach (var item in FunctionBL.GetAllFunctions().Where(o => o.FunctionType == (int)CommonEnums.FunctionType.Menu).OrderBy(t => t.FunctionName))
                    {
                        <option @(item.Id == Model.ParentId ? "selected=\"selected\"" : "") value="@item.Id">@item.FunctionName - Level @item.Lev</option>
                    }
                </select>
            </div>

            <div>
                <label>Position</label>
                <input type="text" id="txtPositionEdit" maxlength="3" onkeypress="return isNumberKey(event);" value="@Model.Position" />
            </div>

            <div>
                <label>Level</label>
                <input type="text" id="txtLevelEdit" maxlength="1" onkeypress="return isNumberKey(event);" value="@Model.Lev" />
            </div>

            <div>
                <label>Menu</label>
                <select id="cboMenuIdEdit">
                    <option value="0" selected="selected">None</option>
                    @foreach (var item in MenuBL.GetAllMenu())
                    {
                        <option @(item.Id == Model.MenuId ? "selected=\"selected\"" : "") value="@item.Id">@item.DisplayName</option>
                    }
                </select>
            </div>

        </div>
        <div class="d-popup-footer">
            <input type="submit" class="btn" value="Lưu" onclick="return doEditFunction()" />
        </div>
    </div>

    <script>
		var functionId = '@Model.Id', functionNameEdit, displayNameEdit, functionTypeEdit, hrefGetEdit, hrefPostEdit, positionEdit, parentIdEdit, levelEdit, menuIdEdit;

		function doEditFunction() {
			if (validateFormEditFunction()) {
				var formData = new FormData();
				collectDataToEditFunction(formData);
				$.ajax({
					url: '/quan-tri-he-thong/quan-ly-chuc-nang/do-edit-function',
					type: 'POST',
					data: formData,
					processData: false,
					contentType: false,
					traditional: true,
					async: false,
					headers: { "cache-control": "no-cache" },
					success: function (data) {
						if (data != null) {
							if (onResponse(data)) {
								if (data["EditFunctionResult"]["isEditFunctionSuccess"]) {
									showSuccess(data["EditFunctionResult"]["message"]);
									ClosePopupDialog('dpop-functions', true);
									window.findFunctions(1, 0);
								} else {
									showError(data["EditFunctionResult"]["message"]);
								}
							}
						}
					},
					error: function (e) {
						console.log(e);
					}
				});
			}
		}

		function validateFormEditFunction() {
			functionNameEdit = $('#txtFunctionNameEdit').val().trim();
			displayNameEdit = $('#txtDisplayNameEdit').val().trim();
			functionTypeEdit = $('#cboFunctionTypeEdit').val();
			hrefGetEdit = $('#txtHrefGetEdit').val().trim();
			hrefPostEdit = $('#txtHrefPostEdit').val().trim();
			positionEdit = $('#txtPositionEdit').val().trim();
			parentIdEdit = $('#cboParentIdEdit').val();
			levelEdit = $('#txtLevelEdit').val().trim();
			menuIdEdit = $('#cboMenuIdEdit').val();

			if (functionNameEdit === "") {
				$('#txtFunctionNameEdit').focus().val('');
				showError('Function Name không được để trống!');
				return false;
			}

			return true;
		}

		function collectDataToEditFunction(formData) {
			formData.append('functionInfo.Id', functionId);
			formData.append('functionInfo.FunctionName', functionNameEdit);
			formData.append('functionInfo.DisplayName', displayNameEdit);
			formData.append('functionInfo.FunctionType', functionTypeEdit);
			formData.append('functionInfo.HrefGet', hrefGetEdit);
			formData.append('functionInfo.HrefPost', hrefPostEdit);
			formData.append('functionInfo.Position', positionEdit);
			formData.append('functionInfo.ParentId', parentIdEdit);
			formData.append('functionInfo.Lev', levelEdit);
			formData.append('functionInfo.MenuId', menuIdEdit);
		}
    </script>

}
catch (Exception)
{
    // ignored
}
