@using Common.CommonData
@using ObjectInfos.ModuleUsersAndRoles
@model List<FunctionInfo>
@try
{
	FunctionInfo currentFunction = ViewBag.CurrentFunction;

	<style>
		input[type="text"].input-inrow {
			width: 460px;
		}
		input[type="button"].button-inrow {
			float: right;
		}
		.lstInnerFunctions > * {
			margin-top: 10px;
			height: 30px;
		}
	</style>

	<div class="popup-opacity-wrapper"></div>
	<div class="d-popup" style="overflow: visible">
		<div class="d-popup-content">
			<div class="d-row-full">
				<div class="d-row-title"><span>Function Name</span></div>
				<div class="d-row-content">
					<input type="text" readonly="readonly" id="txtFunctionNameOnInnerFnsView" value="@currentFunction.FunctionName" />
				</div>
			</div>
			<hr style="margin-top: 10px; margin: 10px 5% 0 5%;"/>
			<div class="d-row-full">
				<div class="d-row-title" style="padding-top: 10px;"><span class="text-font-medium">Danh sách chức năng con</span></div>
				<div class="d-row-content lstInnerFunctions" id="lstInnerFunctions">
					@foreach (var item in Model)
					{
						<input class="input-inrow" type="text" readonly="readonly" id="txtFunctionNameOnInnerFnsView" value="@item.HrefPost" />
						<input type="button" class="btn button-inrow" value="Delete" onclick="deleteInnerFunction(this, @item.Id)" />
					}
				</div>
			</div>
			<div class="d-row-full">
				<div class="d-row-title"><span>Thêm chức năng con (Url Get or Post)</span> <i class="redspan">(*)</i></div>
				<div class="d-row-content">
					<input type="text" class="input-inrow" id="txtHrefInnerFunction" placeholder="Url Get or Post" />
					<input type="button" class="btn button-inrow" value="Save" onclick="doAddNewInnerFunction()" />
				</div>
			</div>
		</div>
		
		<div class="d-popup-footer">
		</div>
	</div>

	<script>
		var hrefInnerFunction;
		function doAddNewInnerFunction() {
			if (validateFormAddNewInnerFunction()) {
				var formData = new FormData();
				collectDataToAddNewInnerFunction(formData);
				$.ajax({
					url: '/quan-tri-he-thong/quan-ly-chuc-nang/do-add-function',
					type: 'POST',
					data: formData,
					processData: false,
					contentType: false,
					traditional: true,
					async: false,
					headers: { "cache-control": "no-cache" },
					success: function (data) {
						if (data != null) {
							if (onResponse(data)) {
								$('#txtHrefInnerFunction').val('');
								$('#lstInnerFunctions').append('<input type="text" class="input-inrow" readonly="readonly" id="txtFunctionNameOnInnerFnsView" value="' + hrefInnerFunction + '" />'
									+ '<input type="button" class="btn button-inrow" value="Delete" onclick="deleteInnerFunction(this, ' + data["result"]["functionIdAdded"] + ')" />');
							}
						}
					},
					error: function (e) {
						console.log(e);
					}
				});
			}
		}

		function validateFormAddNewInnerFunction() {
			hrefInnerFunction = $('#txtHrefInnerFunction').val().trim();
			if (hrefInnerFunction === "") {
				$('#txtHrefInnerFunction').focus().val('');
				showError('Url Get or Post không được để trống!');
				return false;
			}

			return true;
		}

		function collectDataToAddNewInnerFunction(formData) {
			formData.append('functionInfo.FunctionType', '@((int)CommonEnums.FunctionType.Inner)');
			formData.append('functionInfo.HrefGet', '@(string.IsNullOrEmpty(currentFunction.HrefGet) ? currentFunction.HrefPost : currentFunction.HrefGet)');
			formData.append('functionInfo.HrefPost', hrefInnerFunction);
			formData.append('functionInfo.ParentId', '@currentFunction.Id');
			formData.append('functionInfo.Lev', '@(currentFunction.Lev + 1)');
		}

		function deleteInnerFunction(el, functionId) {
			$.ajax({
				url: "/quan-tri-he-thong/quan-ly-chuc-nang/do-delete-function",
				type: "POST",
				data: { functionId : functionId },
				headers: { "cache-control": "no-cache" },
				async: false,
				success: function (data) {
					if (data != null) {
						if (onResponse(data)) {
							$(el).prev().remove();
							$(el).remove();
						}
					}
				},
				error: function (e) {
					console.log(e);
				}
			});
		}
	</script>

}
catch (Exception)
{
	// ignored
}

