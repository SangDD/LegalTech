@using Common.CommonData
@using ObjectInfos;
@using Common;
@model WikiDoc_Info
@{
    ViewBag.Title = "Sửa bài viết";
    Layout = "~/ViewsShared/_Layout.cshtml";
    List<WikiCatalogues_Info> _listcata = new List<WikiCatalogues_Info>();
    if(ViewBag.ListCata != null)
    {
        _listcata = ViewBag.ListCata;
    }

    var _CataInfo = new WikiCatalogues_Info();
    if (ViewBag.CataInfo != null)
    {
        _CataInfo = ViewBag.CataInfo;
    }
    string   _backhref = "/wiki-manage/wiki-doc/list/" + Model.STATUS;
    //if(Model.STATUS == CommonWiki.Stt_daduyet)
    //{
    //    _backhref = "/wiki-manage/wiki-doc/list/" + Model.STATUS; ;
    //}
}

@try
{
    <style>
        /*độ rộng tên cột title từng trang là khác nhau nên khai báo ở trang đó luôn*/
        .div-search-title > div {
            width: 150px;
        }
    </style>
    <script>
        var _isSimpleEditorToolBar = 0;// set cho ckfinder có cấu hình xoạn thảo đơn giản

    </script>
    <script src="~/Content/ckeditor/ckeditor.js"></script>
    <div class="divCover">
        <div class="d-nav">
            <img src="~/Content/icons/Body-icon-home.png" /> I
            <a href="/home">Home</a>
            <span class="red">></span>
            <a href="/wiki-doc/list">Quản lý bài viết</a>
            <span class="red">></span>
            <a href="#">Sửa bài viết</a>
        </div>
    </div>
    <div class="divCover">
        <div class="classLine">
        </div>
    </div>

    <div class="d-main">
        <div class="divCover">
            <div class="classTitle">
                <input type="hidden" value="MODIFIED_DATE" id="colSorted" />
                <input type="hidden" value="DESC" id="SortType" />
                <input type="hidden" value="" id="OptionSorting" />
                <input type="hidden"  value="@Model.ID" id="txtDocID"/>
                <input type="hidden" id="txtcurrstatus"   value="@ViewBag.CurrStatus" />
                <input type="hidden" id="txtlanguagecode" value="@Model.LANGUAGE_CODE" />
                <div class="div-title-content"> THÔNG TIN BÀI VIẾT </div>
            </div>
        </div>

        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Tiêu đề<i class="redspan">(*)</i></div>
            </div>
            <div class="div-search-content">
                <div>
                    <input type="text" id="txtTitle" maxlength="500" value="@Model.TITLE"/>
                </div>
            </div>
        </div>
  
        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Chủ đề</div>
            </div>
            <div class="div-search-content">
                <div id="divWikiChildCatalogue">
                    <input type="hidden" id="CboAddWikiCataChild" value="@_CataInfo.ID" />
                    @if (WebApps.CommonFunction.AppsCommon.GetCurrentLang().ToUpper().Contains("VN"))
                    {
                        <input type="text" readonly value="@_CataInfo.NAME" />
                    }
                    else
                    {
                        <input type="text" readonly value="@_CataInfo.NAME_ENG" />
                    }
                </div>
            </div>
        </div>

      
        @Html.Partial("/Areas/Wiki/Views/WikiDoc/_PartialTaiLieuUpload.cshtml", new string[] { "WIKIADD_FILE_01", "File đính kèm 1" })
        @if (!string.IsNullOrEmpty(Model.FILE_URL01))
        {
            <div class="div-checkbox" id="div_ImgDownload_WIKIADD_FILE_01" style="border: none;">
                <a style="border: none;" href="@Model.FILE_URL01" target="_blank">
                    <i class="fas fa-download" style="color:blue;font-size:16px;margin-top:7px; margin-right:5px;"></i>
                    <span>@Model.FILE_URL01.GetFilename()</span>
                  
                </a>
            </div>
            <div class="div-checkbox" id="div_ImgRemove_WIKIADD_FILE_01" style="border: none;">
                <img onclick="RemoveFile_Edit('WIKIADD_FILE_01')" src="~/Content/icons/delete_file.png" style="margin: 10px 5px 0px 5px" />
            </div>
        }
        @Html.Partial("/Areas/Wiki/Views/WikiDoc/_PartialTaiLieuUpload.cshtml", new string[] { "WIKIADD_FILE_02", "File đính kèm 2" })
        @if (!string.IsNullOrEmpty(Model.FILE_URL02))
        {
            <div class="div-checkbox" id="div_ImgDownload_WIKIADD_FILE_02" style="border: none;">
                <a style="border: none;" href="@Model.FILE_URL02" target="_blank">
                    <i class="fas fa-download" style="color:blue;font-size:16px;margin-top:7px; margin-right:5px;"></i>
                    <span>@Model.FILE_URL02.GetFilename()</span>
               
                </a>
            </div>
            <div class="div-checkbox" id="div_ImgRemove_WIKIADD_FILE_02" style="border: none;">
                <img onclick="RemoveFile_Edit('WIKIADD_FILE_02')" src="~/Content/icons/delete_file.png" style="margin: 10px 5px 0px 5px" />
            </div>
        }
        @Html.Partial("/Areas/Wiki/Views/WikiDoc/_PartialTaiLieuUpload.cshtml", new string[] { "WIKIADD_FILE_03", "File đính kèm 3" })
       @if (!string.IsNullOrEmpty(Model.FILE_URL03))
       {
            <div class="div-checkbox" id="div_ImgDownload_WIKIADD_FILE_03" style="border: none;">
                <a style="border: none;" href="@Model.FILE_URL03" target="_blank">
                    <i class="fas fa-download" style="color:blue;font-size:16px;margin-top:7px; margin-right:5px;"></i>
                    <span>@Model.FILE_URL03.GetFilename()</span>
              
                </a>
            </div>
            <div class="div-checkbox" id="div_ImgRemove_WIKIADD_FILE_03" style="border: none;">
                <img onclick="RemoveFile_Edit('WIKIADD_FILE_03')" src="~/Content/icons/delete_file.png" style="margin: 10px 5px 0px 5px" />
            </div>
        }
        <input type="hidden" value='@Model.FILE_URL01' id="txt_WIKIADD_OLD_FILE_01" />
        <input type="hidden" value='@Model.FILE_URL02' id="txt_WIKIADD_OLD_FILE_02" />
        <input type="hidden" value='@Model.FILE_URL03' id="txt_WIKIADD_OLD_FILE_03" />
         

        <div style="margin-top:15px">
            <div>Nội dung<i class="redspan">(*)</i></div>
            <textarea type="text" id="txtAddContent">@Html.Raw(Model.CONTENT)</textarea>
        </div>
     
        @*<div class="div-search-ad">
            <div class="div-search-title">
                <div>Lý do từ chối</div>
            </div>
            <div class="div-search-content">
                <div>
                    <input type="text" id="txtRefuseReason" maxlength="200" value="" />
                </div>
            </div>
        </div>*@

        <input type="text" id="txthashtag" style="display:none" />
        <div type="text" id="divhashtag" style="display:none"></div>

    </div>
    if (Model.STATUS == 1 )
    {
        <div class="class_save">
            <div class="classGuiDon">
                <input type="button" value="Gửi bài" id="btnGuiDon" class="btn" />
            </div> <div class="classLuuTam">
                <input type="button" value="Lưu tạm" id="btnLuuTam" class="btn" />
            </div>
        </div>
    }
    else if (Model.STATUS == 3)
    {
        <div class="class_save">
            <div class="classGuiDon">
                <input type="button" value="Lưu" id="btnDangTin" class="btn" />
            </div>
        </div>

    }
    else if (Model.STATUS == 4)
    {
        <div class="class_save">
            <div class="classGuiDon">
                <input type="button" value="Gửi bài" id="btnGuiDon" class="btn" />
            </div>
        </div>
    }
    else
    {
    <div class="class_save">
        <div class="classGuiDon">
            <input type="button" value="Đăng tin" id="btnDangTin" class="btn" />
        </div>
        <div class="classGuiDon">
            <input type="button" value="Từ chối" id="btnTuChoi" class="btn" />
        </div>
    </div>
    }




            <script>

                var txtAddContent = CKEDITOR.replace("txtAddContent",
             {
                 height: 500

             });



                function FuncSearchChildCatalogue(_cboId, _divid) {
                    try {
                        var inputValue = $("#" + _cboId).val();
                        if (inputValue == "")
                            return;
                        $.ajax({
                            type: "POST",
                            url: "/wiki-manage/wiki-doc/search-catalogue-child",
                            headers: { "cache-control": "no-cache" },
                            data: { p_parentid: $("#" + _cboId).val() },
                            async: false,
                            success: function (data) {
                                if (data != null) {
                                    if (validateResponse(data)) {
                                        $("#" + _divid).html(data);
                                    }
                                }
                                return false;
                            }
                        });
                    } catch (e) {
                        alert(e.toString())
                    }
                }




                $("#btnLuuTam").click(function () {
                    try {
                        var txtDocID = $("#txtDocID");
                        var reponse = false;
                        var formData = new FormData();
                        var txtTitle = $("#txtTitle");
                        var CboAddWikiCataParent = $("#CboAddWikiCataParent");
                        var CboAddWikiCataChild = $("#CboAddWikiCataChild");

                        if (txtTitle.val().trim() == "") {
                            showError('Tiêu đề không được để trống!');
                            txtTitle.focus();
                            return false;
                        }

                        if (CboAddWikiCataChild.val() == "" || CboAddWikiCataChild.val() == null) {
                            showError('Chủ đề bài viết không được để trống!');
                            $("#CboAddWikiCataChild").multipleSelect("focus");
                            return false;
                        }
                        var _contentVal = CKEDITOR.instances['txtAddContent'].getData();
                        if (_contentVal.trim() == "" || _contentVal.replace(/&nbsp;/g, '').trim() == "") {
                            showError('Nội dung bài viết không được để trống!!');
                            txtAddContent.focus();
                            txtAddContent.setData('');
                            return false;
                        }

                        formData.append("_objectInfo.ID", txtDocID.val());
                        formData.append("_objectInfo.TITLE", txtTitle.val().trim());
                        formData.append("_objectInfo.CATA_ID", CboAddWikiCataChild.val());
                        formData.append("_objectInfo.CONTENT", _contentVal);
                        formData.append("_objectInfo.STATUS", "1");
                        var txt_WIKIADD_OLD_FILE_01 = $("#txt_WIKIADD_OLD_FILE_01");
                        var txt_WIKIADD_OLD_FILE_02 = $("#txt_WIKIADD_OLD_FILE_02");
                        var txt_WIKIADD_OLD_FILE_03 = $("#txt_WIKIADD_OLD_FILE_03");

                        formData.append("_objectInfo.FILE_URL01", txt_WIKIADD_OLD_FILE_01.val());
                        formData.append("_objectInfo.FILE_URL02", txt_WIKIADD_OLD_FILE_02.val());
                        formData.append("_objectInfo.FILE_URL03", txt_WIKIADD_OLD_FILE_03.val());
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_01", "0");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_02", "1");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_03", "2");
                        formData.append("_objectInfo.OLD_STATUS", $("#txtcurrstatus").val());
                        formData.append("_objectInfo.LANGUAGE_CODE", $("#txtlanguagecode").val());
                        $.ajax({
                            url: '/wiki-manage/wiki-doc/save-edit-doc',
                            type: 'POST',
                            data: formData,
                            processData: false, contentType: false, traditional: true, dataType: "json",
                            enctype: 'multipart/form-data', async: false, headers: { "cache-control": "no-cache" },
                            success: function (data) {
                                if (data != null && data.status >= 0) {
                                    doUpdateHashTag(data.HashTag);

                                } else {
                                    jError(AddFail, ThongBao, function () {
                                    });
                                }
                            },
                            error: function (e) {
                                console.log(e);
                            }
                        });

                    } catch (e) {
                        alert(e.toString());
                        return false;
                    }

                });



                $("#btnGuiDon").click(function () {
                    try {
                        var txtDocID = $("#txtDocID");
                        var reponse = false;
                        var formData = new FormData();
                        var txtTitle = $("#txtTitle");
                        var CboAddWikiCataParent = $("#CboAddWikiCataParent");
                        var CboAddWikiCataChild = $("#CboAddWikiCataChild");

                        if (txtTitle.val().trim() == "") {
                            showError('Tiêu đề không được để trống!');
                            txtTitle.focus();
                            return false;
                        }

                        if (CboAddWikiCataChild.val() == "" || CboAddWikiCataChild.val() == null) {
                            showError('Chủ đề bài viết không được để trống!');
                            $("#CboAddWikiCataChild").multipleSelect("focus");
                            return false;
                        }
                        var _contentVal = CKEDITOR.instances['txtAddContent'].getData();
                        if (_contentVal.trim() == "" || _contentVal.replace(/&nbsp;/g, '').trim() == "") {
                            showError('Nội dung bài viết không được để trống!!');
                            txtAddContent.focus();
                            txtAddContent.setData('');
                            return false;
                        }
                        formData.append("_objectInfo.ID", txtDocID.val());
                        formData.append("_objectInfo.TITLE", txtTitle.val().trim());
                        formData.append("_objectInfo.CATA_ID", CboAddWikiCataChild.val());
                        formData.append("_objectInfo.CONTENT", _contentVal);
                        var txt_WIKIADD_OLD_FILE_01 = $("#txt_WIKIADD_OLD_FILE_01");
                        var txt_WIKIADD_OLD_FILE_02 = $("#txt_WIKIADD_OLD_FILE_02");
                        var txt_WIKIADD_OLD_FILE_03 = $("#txt_WIKIADD_OLD_FILE_03");

                        formData.append("_objectInfo.FILE_URL01", txt_WIKIADD_OLD_FILE_01.val());
                        formData.append("_objectInfo.FILE_URL02", txt_WIKIADD_OLD_FILE_02.val());
                        formData.append("_objectInfo.FILE_URL03", txt_WIKIADD_OLD_FILE_03.val());
                        formData.append("_objectInfo.STATUS", "2");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_01", "0");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_02", "1");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_03", "2");
                        formData.append("_objectInfo.OLD_STATUS", $("#txtcurrstatus").val());
                        formData.append("_objectInfo.LANGUAGE_CODE", $("#txtlanguagecode").val());
                        $.ajax({
                            url: '/wiki-manage/wiki-doc/save-edit-doc',
                            type: 'POST',
                            data: formData,
                            processData: false, contentType: false, traditional: true, dataType: "json",
                            enctype: 'multipart/form-data', async: false, headers: { "cache-control": "no-cache" },
                            success: function (data) {
                                if (data != null && data.status >= 0) {
                                    doUpdateHashTag(data.HashTag);

                                } else {
                                    jError(AddFail, ThongBao, function () {
                                    });
                                }
                            },
                            error: function (e) {
                                console.log(e);
                            }
                        });

                    } catch (e) {
                        alert(e.toString());
                        return false;
                    }

                });

                $("#btnDangTin").click(function () {
                    try {
                        var txtDocID = $("#txtDocID");
                        var reponse = false;
                        var formData = new FormData();
                        var txtTitle = $("#txtTitle");
                        var CboAddWikiCataParent = $("#CboAddWikiCataParent");
                        var CboAddWikiCataChild = $("#CboAddWikiCataChild");

                        if (txtTitle.val().trim() == "") {
                            showError('Tiêu đề không được để trống!');
                            txtTitle.focus();
                            return false;
                        }

                        if (CboAddWikiCataChild.val() == "" || CboAddWikiCataChild.val() == null) {
                            showError('Chủ đề bài viết không được để trống!');
                            $("#CboAddWikiCataChild").multipleSelect("focus");
                            return false;
                        }
                        var _contentVal = CKEDITOR.instances['txtAddContent'].getData();
                        if (_contentVal.trim() == "" || _contentVal.replace(/&nbsp;/g, '').trim() == "") {
                            showError('Nội dung bài viết không được để trống!!');
                            txtAddContent.focus();
                            txtAddContent.setData('');
                            return false;
                        }
                        formData.append("_objectInfo.ID", txtDocID.val());
                        formData.append("_objectInfo.TITLE", txtTitle.val().trim());
                        formData.append("_objectInfo.CATA_ID", CboAddWikiCataChild.val());
                        formData.append("_objectInfo.CONTENT", _contentVal);
                        var txt_WIKIADD_OLD_FILE_01 = $("#txt_WIKIADD_OLD_FILE_01");
                        var txt_WIKIADD_OLD_FILE_02 = $("#txt_WIKIADD_OLD_FILE_02");
                        var txt_WIKIADD_OLD_FILE_03 = $("#txt_WIKIADD_OLD_FILE_03");

                        formData.append("_objectInfo.FILE_URL01", txt_WIKIADD_OLD_FILE_01.val());
                        formData.append("_objectInfo.FILE_URL02", txt_WIKIADD_OLD_FILE_02.val());
                        formData.append("_objectInfo.FILE_URL03", txt_WIKIADD_OLD_FILE_03.val());
                        formData.append("_objectInfo.STATUS", "3");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_01", "0");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_02", "1");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_03", "2");
                        formData.append("_objectInfo.OLD_STATUS", $("#txtcurrstatus").val());
                        formData.append("_objectInfo.LANGUAGE_CODE", $("#txtlanguagecode").val());
                        $.ajax({
                            url: '/wiki-manage/wiki-doc/save-edit-doc',
                            type: 'POST',
                            data: formData,
                            processData: false, contentType: false, traditional: true, dataType: "json",
                            enctype: 'multipart/form-data', async: false, headers: { "cache-control": "no-cache" },
                            success: function (data) {
                                if (data != null && data.status >= 0) {
                                    doUpdateHashTag(data.HashTag);

                                } else {
                                    jError(AddFail, ThongBao, function () {
                                    });
                                }
                            },
                            error: function (e) {
                                console.log(e);
                            }
                        });

                    } catch (e) {
                        alert(e.toString());
                        return false;
                    }

                });

                $("#btnTuChoi").click(function () {
                    try {
                        var txtDocID = $("#txtDocID");
                        var reponse = false;
                        var formData = new FormData();
                        var txtTitle = $("#txtTitle");
                        var CboAddWikiCataParent = $("#CboAddWikiCataParent");
                        var CboAddWikiCataChild = $("#CboAddWikiCataChild");

                        if (txtTitle.val().trim() == "") {
                            showError('Tiêu đề không được để trống!');
                            txtTitle.focus();
                            return false;
                        }

                        if (CboAddWikiCataChild.val() == "" || CboAddWikiCataChild.val() == null) {
                            showError('Chủ đề bài viết không được để trống!');
                            $("#CboAddWikiCataChild").multipleSelect("focus");
                            return false;
                        }
                        var _contentVal = CKEDITOR.instances['txtAddContent'].getData();
                        if (_contentVal.trim() == "" || _contentVal.replace(/&nbsp;/g, '').trim() == "") {
                            showError('Nội dung bài viết không được để trống!!');
                            txtAddContent.focus();
                            txtAddContent.setData('');
                            return false;
                        }
                        formData.append("_objectInfo.ID", txtDocID.val());
                        formData.append("_objectInfo.TITLE", txtTitle.val().trim());
                        formData.append("_objectInfo.CATA_ID", CboAddWikiCataChild.val());
                        formData.append("_objectInfo.CONTENT", _contentVal);
                        var txt_WIKIADD_OLD_FILE_01 = $("#txt_WIKIADD_OLD_FILE_01");
                        var txt_WIKIADD_OLD_FILE_02 = $("#txt_WIKIADD_OLD_FILE_02");
                        var txt_WIKIADD_OLD_FILE_03 = $("#txt_WIKIADD_OLD_FILE_03");

                        formData.append("_objectInfo.FILE_URL01", txt_WIKIADD_OLD_FILE_01.val());
                        formData.append("_objectInfo.FILE_URL02", txt_WIKIADD_OLD_FILE_02.val());
                        formData.append("_objectInfo.FILE_URL03", txt_WIKIADD_OLD_FILE_03.val());
                        formData.append("_objectInfo.STATUS", "4");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_01", "0");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_02", "1");
                        ponse = funcGetCheckValueAndText(formData, "WIKIADD_FILE_03", "2");
                        formData.append("_objectInfo.OLD_STATUS", $("#txtcurrstatus").val());
                        formData.append("_objectInfo.LANGUAGE_CODE", $("#txtlanguagecode").val());
                        $.ajax({
                            url: '/wiki-manage/wiki-doc/save-edit-doc',
                            type: 'POST',
                            data: formData,
                            processData: false, contentType: false, traditional: true, dataType: "json",
                            enctype: 'multipart/form-data', async: false, headers: { "cache-control": "no-cache" },
                            success: function (data) {
                                if (data != null && data.status >= 0) {
                                    jAlert(EditSuccess, ThongBao, function () {
                                        location.href = '@_backhref';
                                    });
                                } else {
                                    jError(AddFail, ThongBao, function () {
                                    });
                                }
                            },
                            error: function (e) {
                                console.log(e);
                            }
                        });

                    } catch (e) {
                        alert(e.toString());
                        return false;
                    }

                });

                function doUpdateHashTag(v_data) {
                    try {
                        var txtDocID = $("#txtDocID");
                        var _hashtag = $("#divhashtag").html(v_data).html();
                        $.ajax({
                            url: "/wiki-manage/wiki-doc/save-edit-hashtag-doc",
                            type: "POST",
                            // p_id, string p_hashtag
                            data: { p_id: txtDocID.val(), p_hashtag: _hashtag },
                            headers: { "cache-control": "no-cache" },
                            async: false,
                            success: function (data) {
                                if (data.status >= 0) {
                                    jAlert(EditSuccess, ThongBao, function () {
                                        location.href = '@_backhref';
                                    });
                                }
                            },
                            error: function (e) {
                                console.log(e);
                            }
                        });

                    } catch (e) {
                        alert(e.toString());
                    }
                }



                function funcGetCheckValueAndText(formData, pID, pItem) {
                    try {
                        //Các tài liệụ đính kèm

                        formData.append("pAppDocumentInfo[" + pItem + "].keyFileUpload", pID);
                        formData.append("pAppDocumentInfo[" + pItem + "].Document_Id", $("#" + pID).val());
                        formData.append("pAppDocumentInfo[" + pItem + "].Isuse", "1");
                        return true;
                    } catch (e) {
                        return false;
                    }

                }

                function RemoveFile_Edit(p_Id) {
                    try {

                        $("#div_ImgDownload_" + p_Id).addClass("clssDisplaynone");
                        $("#div_ImgRemove_" + p_Id).addClass("clssDisplaynone");
                        $("#txt_" + p_Id).val("");


                    } catch (e) {
                        alert(e);
                    }
                }



            </script>
            }
            catch (Exception)
            {
            // ignored
            }
