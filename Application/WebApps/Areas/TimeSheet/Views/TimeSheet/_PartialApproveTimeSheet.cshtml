@using ObjectInfos;
@model Timesheet_Info

<style>
    /*độ rộng tên cột title từng trang là khác nhau nên khai báo ở trang đó luôn*/
    .div-search-title > div {
        width: 120px;
    }
</style>

<div class="" style="padding:5px 38px">
    <div class="divCover divCover_popup">
        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Mã đơn</div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.App_Case_Code, new { id = "txtApp_Case_Code", @disabled = "disabled" })
                </div>
            </div>
        </div>
        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Loại đơn</div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.App_Name, new { id = "txtApp_Name", @disabled = "disabled" })
                </div>
            </div>
        </div>

        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Luật sư</div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Lawer_Name, new { id = "txtLawer_Name", @disabled = "disabled" })
                </div>
            </div>
        </div>

        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Timesheet name <i class="redspan">(*)</i></div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Name, new { id = "txtName", @maxlength = "200", @style = "width: 200px", @disabled = "disabled" })
                </div>
            </div>

            <div class="div-search-title">
                <div>Trạng thái  <i class="redspan">(*)</i></div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Status_Name, new { id = "txtStatus_Name", @readonly = "readonly", @disabled = "disabled" })
                </div>
            </div>
        </div>

        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Ngày <i class="redspan">(*)</i></div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Time_Date, "{0:dd/MM/yyyy}", new { id = "txtTime_Date", @Value = Model.Time_Date == DateTime.MinValue ? "" : Model.Time_Date.ToString("dd/MM/yyyy"), @placeholder = "dd/mm/yyyy", @class = "datepicker", @style = "width: 200px", @disabled = "disabled" })
                </div>
            </div>
            <div class="div-search-title">
                <div>Giờ thực tế <i class="redspan">(*)</i></div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Hours, new { id = "txtHours", @Value = Model.Hours == 0 ? "" : Model.Hours.ToString("#,##0.##"), onkeyup = "jsFormatNumber(this.value, this.id)", @disabled = "disabled" })
                </div>
            </div>
        </div>

        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Giờ điều chỉnh <i class="redspan">(*)</i></div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Hours_Adjust, new { id = "txtHours_Adjust", @Value = Model.Hours_Adjust == 0 ? "" : Model.Hours_Adjust.ToString("#,##0.##"), onkeyup = "jsFormatNumber(this.value, this.id)" })
                </div>
            </div>
        </div>

        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Ghi chú</div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Notes, new { id = "txtNotes", @maxlength = "2000" })
                </div>
            </div>
        </div>

        <div class="div-search-ad">
            <div class="div-search-title">
                <div>Lý do từ chối</div>
            </div>
            <div class="div-search-content">
                <div>
                    @Html.TextBoxFor(m => m.Reject_Reason, new { id = "txtReject_Reason", @maxlength = "2000" })
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="form-group-bottom">
            @*<input type="submit" class="btn-default" value="Lưu" onclick="return doEditTimeSheet()" />*@
            <input type="submit" class="btn-default" value="Duyệt" onclick="return doApproveTimeSheet()" />
            <input type="submit" class="btn-default" value="Từ chối" onclick="return doRejectTimeSheet()" />
        </div>
    </div>
</div>

<script>

    function CheckValidate() {
        try {
            if (CheckSessionTimeOut() == false) {
                return false;
            }

            var txtHours_Adjust = $("#txtHours_Adjust").val();
            if (txtHours_Adjust == null) {
                jError("Giờ điều chỉnh không được bỏ trống!", "lỗi", function () {
                    $("#txtHours_Adjust").val('');
                    $('#txtHours_Adjust').focus();
                });
                return false;
            }
        } catch (e) {
            alert(e);
            return false;
        }
    }

    function doRejectTimeSheet() {

        if (validateForm() == false) {
            return;
        }


        nvsConfirm(null, "Bạn có chắc chắn muốn Từ chối timesheet này không?", function () {
            var formData = new FormData();
            collectData(formData, 2);
            $.ajax({
                url: '/quan-ly-timesheet/danh-sach-timesheet/do-approve-timeshet',
                type: 'POST',
                data: formData,
                async: true, traditional: true, contentType: false, processData: false,
                headers: { "cache-control": "no-cache" },
                beforeSend: function () {
                    CreateRollingWaitingIcon(true);
                },
                success: function (data) {
                    CreateRollingWaitingIcon(false);
                    if (data.success == "-1") {
                        jError("Lỗi check lại kết nối tới server");
                        return false;
                    }
                    else {
                        jAlert('Từ chối timesheet thành công!', "THÔNG BÁO", function () {
                            ClosePopUpTimeSheet();
                            Search_TimeSheet(1,1);
                        });
                    }
                },
                error: function (e) {
                    CreateRollingWaitingIcon(false);
                    console.log(e);
                }
            });
        });
    }

    function doApproveTimeSheet() {
        if (validateForm() == false) {
            return;
        }

        nvsConfirm(null, "Bạn có chắc chắn muốn Duyệt timesheet này không?", function () {
            var formData = new FormData();
            collectData(formData, 1);
            $.ajax({
                url: '/quan-ly-timesheet/danh-sach-timesheet/do-approve-timeshet',
                type: 'POST',
                data: formData,
                async: true, traditional: true, contentType: false, processData: false,
                headers: { "cache-control": "no-cache" },
                beforeSend: function () {
                    CreateRollingWaitingIcon(true);
                },
                success: function (data) {
                    CreateRollingWaitingIcon(false);
                    if (data.success == "-1") {
                        jError("Lỗi check lại kết nối tới server");
                        return false;
                    }
                    else {
                        jAlert('Duyệt timesheet thành công!', "THÔNG BÁO", function () {
                            ClosePopupApprove();
                            Search_TimeSheet(1,1);
                        });
                    }
                },
                error: function (e) {
                    CreateRollingWaitingIcon(false);
                    console.log(e);
                }
            });
        });
    }

    function collectData(formData, p_type) {
        formData.append('p_id', @Model.Id);
        formData.append('p_hours_adjust', @Model.Id);
        formData.append('p_status', p_type);
        formData.append('p_reject_reason',  $("#txtReject_Reason").val());
    }
</script>
