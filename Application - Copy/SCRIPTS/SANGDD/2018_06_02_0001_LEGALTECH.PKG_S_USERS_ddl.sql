-- Start of DDL Script for Package LEGALTECH.PKG_S_USERS
-- Generated 02/06/2018 1:52:23 PM from LEGALTECH@LOCAL

CREATE OR REPLACE 
PACKAGE pkg_s_users
  IS TYPE tcursor IS REF Cursor;

PROCEDURE proc_User_CheckLogin
(
    p_username IN VARCHAR2,
    p_password  IN VARCHAR2,
    p_return    OUT NUMBER
);

PROCEDURE proc_User_GetById
(
    p_userId NUMBER,
    p_cursor OUT tcursor
);

PROCEDURE proc_User_GetByUsername
(
    p_username VARCHAR2,
    p_cursor OUT tcursor
);

PROCEDURE proc_User_GetAll
(
    p_cursor OUT tcursor
);

PROCEDURE proc_User_GetAllUserId
(
    p_groupId NUMBER,
    p_cursor OUT tcursor
);

PROCEDURE proc_User_Find
(
    p_userName IN VARCHAR2,
    p_fullName IN VARCHAR2,
    p_type IN VARCHAR2,
    p_status IN VARCHAR2,
    p_orderBy IN VARCHAR2,
    p_startAt IN NUMBER,
    p_endAt IN NUMBER,
    p_totalRecord OUT NUMBER,
    p_cursor OUT tcursor
);

PROCEDURE proc_User_AddNew
(
    p_username IN s_users.username % type,
    p_password IN s_users.password % type,
    p_fullName IN s_users.fullName % type,
    p_DateOfBirth IN s_users.DateOfBirth % type,
    p_Sex IN s_users.Sex % type,
    p_Email IN s_users.Email % type,
    p_Phone IN s_users.Phone % type,
    p_Status In s_users.Status % type,
    p_type IN s_users.type % type,
    p_GroupId IN VARCHAR2,
    p_createdby IN s_users.createdby % type,
    p_return OUT NUMBER
);

PROCEDURE proc_User_Edit
(
    p_userId   IN s_users.id % type,
    p_fullName IN s_users.fullName % type,
    p_DateOfBirth IN s_users.DateOfBirth % type,
    p_Sex IN s_users.Sex % type,
    p_Email IN s_users.Email % type,
    p_Phone IN s_users.Phone % type,
    p_Status In s_users.Status % type,
    p_type IN s_users.type % type,
    p_GroupId IN VARCHAR2,
    p_modifiedBy IN s_users.modifiedby % type,
    p_return OUT NUMBER
);

PROCEDURE proc_User_Delete
(
    p_userId IN NUMBER,
    p_modifiedby VARCHAR2,
    p_return OUT NUMBER
);

PROCEDURE proc_User_ChangePassword
(
    p_userId   IN s_users.id % type,
    p_oldPwd IN s_users.fullName % type,
    p_newPwd IN s_users.DateOfBirth % type,
    p_modifiedBy IN s_users.modifiedby % type,

    p_return OUT NUMBER
);

PROCEDURE proc_User_GetAllUserRoles
(
    p_userId IN NUMBER,
    p_cursor OUT tcursor
);

PROCEDURE proc_User_GetAllSelfGroup
(
    p_userId NUMBER,
    p_cursor OUT tcursor
);


END;
/


CREATE OR REPLACE 
PACKAGE BODY pkg_s_users
IS

PROCEDURE PROC_USER_CHECKLOGIN
(
    P_USERNAME  IN VARCHAR2,
    P_PASSWORD  IN VARCHAR2,
    P_RETURN    OUT NUMBER
)
IS
BEGIN
    P_RETURN:= 0;
    SELECT COUNT(*) INTO P_RETURN FROM S_USERS
    WHERE USERNAME = P_USERNAME AND PASSWORD = P_PASSWORD AND STATUS=PKG_COMMON.USER_STATUS_ACTIVE AND DELETED = 0;

    IF(P_RETURN <> 1) THEN
        SELECT COUNT(*) INTO P_RETURN FROM S_USERS
        WHERE USERNAME = P_USERNAME AND PASSWORD = P_PASSWORD AND STATUS=PKG_COMMON.USER_STATUS_STOPPED AND DELETED = 0;

        IF(P_RETURN = 0) THEN
            P_RETURN:= -1002;
        ELSE
            P_RETURN:= -1003;
        END IF;
    ELSE
        P_RETURN:= 1000;
    END IF;


    EXCEPTION
    WHEN OTHERS THEN
        P_RETURN:= -1001; -- FAILED
    RAISE;
END;

PROCEDURE PROC_USER_GETBYID
(
    P_USERID NUMBER,
    P_CURSOR OUT TCURSOR
)
IS
BEGIN
    OPEN P_CURSOR FOR
    SELECT A.*, T1.CONTENT AS SEXDISPLAYNAME, T2.CONTENT AS STATUSDISPLAYNAME, T3.CONTENT AS TYPE_NAME,
        NVL(A.MODIFIEDDATE, A.CREATEDDATE) AS LASTTIMEUPDATED
    FROM S_USERS A
    LEFT JOIN ALLCODE T1 ON TO_CHAR(A.SEX) = T1.CDVAL AND T1.CDNAME='SEX_TYPE'
    LEFT JOIN ALLCODE T2 ON TO_CHAR(A.STATUS) = T2.CDVAL AND T2.CDNAME='USER_STATUS'
    LEFT JOIN ALLCODE T3 ON TO_CHAR(A.TYPE) = T3.CDVAL AND T3.CDNAME = 'USER' AND T3.CDTYPE = 'USER_TYPE'
    WHERE A.ID = P_USERID AND A.DELETED=0;

    EXCEPTION
    WHEN OTHERS THEN
    RAISE;
END;

PROCEDURE PROC_USER_GETBYUSERNAME
(
    P_USERNAME VARCHAR2,
    P_CURSOR OUT TCURSOR
)
IS
BEGIN
    OPEN P_CURSOR FOR
    SELECT A.*, T1.CONTENT AS SEXDISPLAYNAME, T2.CONTENT AS STATUSDISPLAYNAME, T3.CONTENT AS TYPE_NAME,
    NVL(A.MODIFIEDDATE, A.CREATEDDATE) AS LASTTIMEUPDATED
    FROM S_USERS A
    LEFT JOIN ALLCODE T1 ON TO_CHAR(A.SEX) = T1.CDVAL AND T1.CDNAME='SEX_TYPE'
    LEFT JOIN ALLCODE T2 ON TO_CHAR(A.STATUS) = T2.CDVAL AND T2.CDNAME='USER_STATUS'
    LEFT JOIN ALLCODE T3 ON TO_CHAR(A.TYPE) = T3.CDVAL AND T3.CDNAME = 'USER' AND T3.CDTYPE = 'USER_TYPE'
    WHERE A.USERNAME = P_USERNAME AND A.DELETED=0;

    EXCEPTION
    WHEN OTHERS THEN
    RAISE;
END;

PROCEDURE PROC_USER_GETALL
(
    P_CURSOR OUT TCURSOR
)
IS
BEGIN
    OPEN P_CURSOR FOR
     SELECT A.*, T1.CONTENT AS SEXDISPLAYNAME, T2.CONTENT AS STATUSDISPLAYNAME, T3.CONTENT AS TYPE_NAME,
        NVL(A.MODIFIEDDATE, A.CREATEDDATE) AS LASTTIMEUPDATED
    FROM S_USERS A
    LEFT JOIN ALLCODE T1 ON TO_CHAR(A.SEX) = T1.CDVAL AND T1.CDNAME='SEX_TYPE'
    LEFT JOIN ALLCODE T2 ON TO_CHAR(A.STATUS) = T2.CDVAL AND T2.CDNAME='USER_STATUS'
    LEFT JOIN ALLCODE T3 ON TO_CHAR(A.TYPE) = T3.CDVAL AND T3.CDNAME = 'USER' AND T3.CDTYPE = 'USER_TYPE'
    WHERE  A.DELETED=0;

    EXCEPTION
    WHEN OTHERS THEN
    RAISE;
END;

PROCEDURE PROC_USER_GETALLUSERID
(
    P_GROUPID NUMBER,
    P_CURSOR OUT TCURSOR
)
IS
BEGIN
    OPEN P_CURSOR FOR
    SELECT A.ID
    FROM S_USERS A
    WHERE A.DELETED = 0 AND A.ID IN (SELECT USERID FROM S_GROUP_USER WHERE GROUPID = P_GROUPID);

    EXCEPTION
    WHEN OTHERS THEN
    RAISE;
END;

PROCEDURE PROC_USER_FIND
(
    P_USERNAME IN VARCHAR2,
    P_FULLNAME IN VARCHAR2,
    P_TYPE IN VARCHAR2,
    P_STATUS IN VARCHAR2,
    P_ORDERBY IN VARCHAR2,
    P_STARTAT IN NUMBER,
    P_ENDAT IN NUMBER,
    P_TOTALRECORD OUT NUMBER,
    P_CURSOR OUT TCURSOR
)
IS
    V_SQL VARCHAR2(16000) DEFAULT '';
    V_SQL_COUNT_TOTAL VARCHAR2(16000) DEFAULT '';
    V_CONDITION VARCHAR2(8000) DEFAULT '';
    V_ORDERBY VARCHAR(500) DEFAULT '';
BEGIN
    V_CONDITION:= V_CONDITION || ' AND A.DELETED=0 ';

    IF(LENGTH(P_FULLNAME) > 0) THEN
        V_CONDITION:= V_CONDITION || ' AND UPPER(A.FULLNAME) LIKE UPPER(''%' || P_FULLNAME || '%'')';
    END IF;

    IF(LENGTH(P_USERNAME) > 0) THEN
        V_CONDITION:= V_CONDITION || ' AND UPPER(A.USERNAME) LIKE UPPER(''%' || P_USERNAME || '%'')';
    END IF;

    IF(LENGTH(P_TYPE) > 0) THEN
        V_CONDITION:= V_CONDITION || ' AND UPPER(A.TYPE) IN (' || P_TYPE || ')';
    END IF;

    IF(LENGTH(P_STATUS) > 0) THEN
        V_CONDITION:= V_CONDITION || ' AND A.STATUS IN (' || P_STATUS || ')';
    END IF;

    IF (LENGTH(P_ORDERBY) > 0)  THEN
        V_ORDERBY := ' ORDER BY ' || P_ORDERBY;
    ELSE
        V_ORDERBY := ' ORDER BY LASTTIMEUPDATED DESC ';
    END IF;

    V_SQL:=
    'SELECT A.*, T1.CONTENT AS SEXDISPLAYNAME, T2.CONTENT AS STATUSDISPLAYNAME,
        T3.CONTENT AS TYPE_NAME,
        NVL(A.MODIFIEDDATE, A.CREATEDDATE) AS LASTTIMEUPDATED
    FROM S_USERS A
    LEFT JOIN ALLCODE T1 ON TO_CHAR(A.SEX) = T1.CDVAL AND T1.CDNAME=''SEX_TYPE''
    LEFT JOIN ALLCODE T2 ON TO_CHAR(A.STATUS) = T2.CDVAL AND T2.CDNAME=''USER_STATUS''
    LEFT JOIN ALLCODE T3 ON TO_CHAR(A.TYPE) = T3.CDVAL AND T3.CDNAME = ''USER'' AND T3.CDTYPE = ''USER_TYPE''
    WHERE 1=1 ' || V_CONDITION || V_ORDERBY;

    V_SQL_COUNT_TOTAL:= 'SELECT COUNT(*) FROM S_USERS A WHERE 1=1 ' || V_CONDITION;

    EXECUTE IMMEDIATE V_SQL_COUNT_TOTAL INTO P_TOTALRECORD ;
    IF P_TOTALRECORD IS NULL THEN
        P_TOTALRECORD := 0;
    END IF;

    IF P_ENDAT <> 0 THEN
        V_SQL := 'SELECT * FROM ( SELECT ROWNUM AS STT, A.* FROM  ( ' || V_SQL   ||' ) A ) WHERE STT >= '|| P_STARTAT ||' AND STT <= ' || P_ENDAT;
    ELSE
        V_SQL := 'SELECT ROWNUM STT, A.* FROM  ( ' || V_SQL  || ') A ' ;
    END IF;

    OPEN P_CURSOR FOR V_SQL;

EXCEPTION
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20005, V_SQL_COUNT_TOTAL);
    --RAISE;
END;

PROCEDURE PROC_USER_DELETE
(
    P_USERID IN NUMBER,
    P_MODIFIEDBY VARCHAR2,
    P_RETURN OUT NUMBER
)
IS
    V_EXISTED NUMBER DEFAULT 0;
    V_USER_ACTIVE NUMBER DEFAULT 0;
BEGIN
    SELECT COUNT(*) INTO V_EXISTED FROM S_USERS A WHERE A.ID = P_USERID AND A.DELETED = 0;

    IF(V_EXISTED = 1) THEN
        SELECT A.STATUS INTO V_USER_ACTIVE FROM S_USERS A WHERE A.ID = P_USERID AND A.DELETED = 0;

        IF(V_USER_ACTIVE <> PKG_COMMON.USER_STATUS_ACTIVE) THEN
            UPDATE S_USERS A SET A.DELETED = 1, A.MODIFIEDBY = P_MODIFIEDBY, A.MODIFIEDDATE = SYSDATE
            WHERE A.ID = P_USERID;

            DELETE FROM S_GROUP_USER WHERE USERID=P_USERID;

            COMMIT;
            P_RETURN:= P_USERID;
        ELSE
            P_RETURN:= -1208; -- USER DANG HOAT DONG
        END IF;
    ELSE
        P_RETURN:= -1209; -- TAI KHOAN KHONG TON TAI
    END IF;

EXCEPTION
WHEN OTHERS THEN
     P_RETURN:= -1207;
    RAISE;
END;

PROCEDURE PROC_USER_CHANGEPASSWORD
(
    P_USERID   IN S_USERS.ID % TYPE,
    P_OLDPWD IN S_USERS.FULLNAME % TYPE,
    P_NEWPWD IN S_USERS.DATEOFBIRTH % TYPE,
    P_MODIFIEDBY IN S_USERS.MODIFIEDBY % TYPE,

    P_RETURN OUT NUMBER
)
IS
    V_EXISTED NUMBER DEFAULT 0;
BEGIN
    SELECT COUNT(*) INTO V_EXISTED FROM S_USERS A WHERE A.ID = P_USERID AND A.DELETED = 0;

    IF(V_EXISTED = 1) THEN
        SELECT COUNT(*) INTO V_EXISTED FROM S_USERS A WHERE A.ID = P_USERID AND A.DELETED = 0 AND A.PASSWORD = P_OLDPWD;

        IF(V_EXISTED = 1) THEN
            UPDATE S_USERS SET
            PASSWORD = P_NEWPWD,
            MODIFIEDBY = P_MODIFIEDBY,
            MODIFIEDDATE = SYSDATE
            WHERE ID = P_USERID;

            COMMIT;
            P_RETURN := 1216;
        ELSE
            P_RETURN := -1215; -- WRONG PASSWORD
        END IF;
    ELSE
        P_RETURN := -1214; -- DATA INVALID
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
        P_RETURN:= -1213;
    RAISE;
END;

PROCEDURE PROC_USER_GETALLUSERROLES
(
    P_USERID IN NUMBER,
    P_CURSOR OUT TCURSOR
)
IS
BEGIN
    IF (P_USERID <> -99) THEN
        OPEN P_CURSOR FOR
        SELECT * FROM S_FUNCTIONS F
        WHERE F.FUNCTIONTYPE = PKG_COMMON.FN_IMMEDIATE_SELF OR F.ID IN (
            SELECT DISTINCT FUNCTIONID
            FROM S_GROUP_FUNCTION
            WHERE GROUPID IN (
                SELECT GROUPID FROM S_GROUP_USER WHERE USERID=P_USERID
            )
        )  ORDER BY ID  ,  POSITION  ;
    ELSE
        OPEN P_CURSOR FOR
        SELECT * FROM S_FUNCTIONS F  ORDER BY ID  ,  POSITION ;
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
    RAISE;
END;

PROCEDURE PROC_USER_GETALLSELFGROUP
(
    P_USERID NUMBER,
    P_CURSOR OUT TCURSOR
)
IS
BEGIN
    OPEN P_CURSOR FOR
    SELECT DISTINCT GROUPID FROM S_GROUP_USER WHERE USERID = P_USERID;

    EXCEPTION
    WHEN OTHERS THEN
    RAISE;
END;

PROCEDURE PROC_USER_ADDNEW
(
    P_USERNAME IN S_USERS.USERNAME % TYPE,
    P_PASSWORD IN S_USERS.PASSWORD % TYPE,
    P_FULLNAME IN S_USERS.FULLNAME % TYPE,
    P_DATEOFBIRTH IN S_USERS.DATEOFBIRTH % TYPE,
    P_SEX IN S_USERS.SEX % TYPE,
    P_EMAIL IN S_USERS.EMAIL % TYPE,
    P_PHONE IN S_USERS.PHONE % TYPE,
    P_STATUS IN S_USERS.STATUS % TYPE,
    P_TYPE IN S_USERS.TYPE % TYPE,
    P_GROUPID IN VARCHAR2,
    P_CREATEDBY IN S_USERS.CREATEDBY % TYPE,
    P_RETURN OUT NUMBER
)
IS
    V_EXISTED NUMBER DEFAULT 0;
    V_USERID NUMBER DEFAULT 0;
BEGIN
    SELECT COUNT(*) INTO V_EXISTED FROM S_USERS A
    WHERE UPPER(A.USERNAME) = UPPER(P_USERNAME) AND A.DELETED = 0;
    IF(V_EXISTED = 0) THEN
        SELECT SEQ_S_USERS.NEXTVAL INTO V_USERID FROM DUAL;

        INSERT INTO S_USERS A
        (
            A.ID, A.USERNAME, A.PASSWORD, A.FULLNAME, A.DATEOFBIRTH, A.SEX, A.EMAIL, A.PHONE,
            A.TYPE, A.STATUS, A.CREATEDBY, A.CREATEDDATE, A.DELETED
        )
        VALUES
        (
            V_USERID, P_USERNAME, P_PASSWORD, P_FULLNAME, P_DATEOFBIRTH, P_SEX, P_EMAIL, P_PHONE,
            P_TYPE, P_STATUS, P_CREATEDBY ,SYSDATE, 0
        );

        IF(LENGTH(P_GROUPID) > 0) THEN
            INSERT INTO S_GROUP_USER(GROUPID, USERID)
            VALUES(P_GROUPID, V_USERID);
        END IF;

        COMMIT;
        P_RETURN:= 1200;
    ELSE
        P_RETURN:= -1202;
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
        P_RETURN:= -1201;
    RAISE;
END;

PROCEDURE PROC_USER_EDIT
(
    P_USERID   IN S_USERS.ID % TYPE,
    P_FULLNAME IN S_USERS.FULLNAME % TYPE,
    P_DATEOFBIRTH IN S_USERS.DATEOFBIRTH % TYPE,
    P_SEX IN S_USERS.SEX % TYPE,
    P_EMAIL IN S_USERS.EMAIL % TYPE,
    P_PHONE IN S_USERS.PHONE % TYPE,
    P_STATUS IN S_USERS.STATUS % TYPE,
    P_TYPE IN S_USERS.TYPE % TYPE,
    P_GROUPID IN VARCHAR2,
    P_MODIFIEDBY IN S_USERS.MODIFIEDBY % TYPE,
    P_RETURN OUT NUMBER
)
IS
    V_EXISTED NUMBER DEFAULT 0;
BEGIN
    SELECT COUNT(*) INTO V_EXISTED FROM S_USERS A
    WHERE A.ID = P_USERID AND A.DELETED = 0;

    IF(V_EXISTED = 1) THEN
        UPDATE S_USERS SET
        FULLNAME = P_FULLNAME, DATEOFBIRTH = P_DATEOFBIRTH, SEX = P_SEX, EMAIL = P_EMAIL, PHONE = P_PHONE,
        TYPE = P_TYPE, STATUS = P_STATUS, MODIFIEDBY = P_MODIFIEDBY
        WHERE ID = P_USERID;

        DELETE FROM S_GROUP_USER WHERE USERID = P_USERID;
        IF(LENGTH(P_GROUPID) > 0) THEN
            INSERT INTO S_GROUP_USER(GROUPID, USERID)
            VALUES(P_GROUPID, P_USERID);
        END IF;

        COMMIT;
        P_RETURN:= P_USERID;
    ELSE
        P_RETURN:= -1205;
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
        P_RETURN:= -1204;
    RAISE;
END;


END;
/


-- End of DDL Script for Package LEGALTECH.PKG_S_USERS

